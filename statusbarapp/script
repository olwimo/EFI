#!/bin/sh

rm -rf /Library/Application\ Support/WLAN

echo "mkdir WLAN"
mkdir /Library/Application\ Support/WLAN
mkdir /Library/Application\ Support/WLAN/com.realtek.utility.wifi

echo "Chmod WLAN"
chmod -R 777 /Library/Application\ Support/WLAN

echo "Chown WLAN"
chown -R root:wheel /Library/Application\ Support/WLAN

echo "PreInstall_UI Complete."

cp -R installerFiles.zip StatusBarApp.app RtWlanHelper /Library/Application\ Support/WLAN

. /etc/rc.common

echo "PostInstall_UI.command"

#Filename of Application.
APP="StatusBarApp"
HELPER="RtWlanHelper"
AUXZIP="installerFiles.zip"
INF_NAME="netrtwlanu.inf"

#APP location.
ROOT_PATH="/Library/Application Support/WLAN"
AUX_PATH="com.realtek.utility.wifi"
UTILITY_SOCK_NAME="/var/tmp/com.realtek.utility.statusbar.socket"

sudo mv "$ROOT_PATH/$HELPER" "$ROOT_PATH/$AUX_PATH/" 
sudo mv "$ROOT_PATH/$AUXZIP" "$ROOT_PATH/$AUX_PATH/" 

sudo chmod -R 777 "$ROOT_PATH/$APP.app"
sudo chmod -R 777 "$ROOT_PATH/$AUX_PATH/"
sleep 1
sudo chown -R root:wheel "$ROOT_PATH/$APP.app"
sudo chown -R root:wheel "$ROOT_PATH/$AUX_PATH/$HELPER"


if [ -f "$ROOT_PATH/$AUX_PATH/$AUXZIP" ]; then
	# unzip installerFiles.zip
	cd "$ROOT_PATH/$AUX_PATH"
	sudo find . -name '*.zip' -exec sh -c 'unzip {}' \; -exec /bin/rm {} \;
	sudo find . -name 'installerFiles' -type d -exec /bin/cp -R {}/ . \;

	sudo rm -rf __MACOSX
	sudo rm -rf .DS_Store
	sudo rm -rf installerFiles
	sudo rm -rf ._*

	sudo chmod -R 666 *.inf
	sudo chmod -R 666 rtlCoInst.dat
	sudo chmod -R 666 config.txt

	# sed -i '' $'s/\r//' rtlCoInst.dat
	find ./*.dat -type f -exec sed -i '' $'s/\r//' {} \;

	sudo find . -depth 1 -name '*.inf' -print -exec mv {} $INF_NAME \;
	sudo chmod -R 666 $INF_NAME
fi


  
version=$( /usr/bin/sw_vers -productVersion )
major=$( awk -F'.' '{print $1}' <<< "${version}" )
minor=$( awk -F'.' '{print $2}' <<< "${version}" )
patch=$( awk -F'.' '{print $3}' <<< "${version}" )


# LaunchDaemons/LaunchAgents Plist
AGENT_ID="Wlan.Software"
DAEMON_ID="Wlan.SoftwareDaemon"

if [ "$minor" -ge 7 ]; then
	#echo 10.7~ =$minor
	LAUNCH_AGENT_PLIST="/Library/LaunchAgents/$AGENT_ID.plist"
	LAUNCH_DAEMON_PLIST="/Library/LaunchDaemons/$DAEMON_ID.plist"
else
	#echo 10.6 =$minor
	LAUNCH_AGENT_PLIST="/Library/LaunchAgents/$AGENT_ID"
	LAUNCH_DAEMON_PLIST ="/Library/LaunchDaemons/$DAEMON_ID"
fi


# Write LaunchAgent plist file.
echo '<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>'$AGENT_ID'</string>
    <key>Program</key>
    <string>'$ROOT_PATH/$APP.app/Contents/MacOS/$APP'</string>
    <key>RunAtLoad</key>
    <true/>
</dict>
</plist>' > "$LAUNCH_AGENT_PLIST"


chown -R root:wheel $LAUNCH_AGENT_PLIST
sleep 1
chmod -R 555 $LAUNCH_AGENT_PLIST


# Load the new LaunchAgent.
/bin/launchctl unload "$LAUNCH_AGENT_PLIST"

# using launchctl to execute utility, would generate UTILITY_SOCK_NAME(srwxr-xr-x root:wheel)
# after reboot. Utility start socketServer failed.
# chmod 777 is not work.
# [MACOS-15]
open "$ROOT_PATH/$APP.app"
chmod -R 777 $UTILITY_SOCK_NAME
/bin/launchctl load "$LAUNCH_AGENT_PLIST"


# Check LaunchAgent is loaded.
STATUS=`/bin/launchctl list | /usr/bin/grep -w $AGENT_ID | /usr/bin/awk '{print $3}'`

if [ "$STATUS" == "$AGENT_ID" ]; then
        echo "Success: LaunchAgent loaded."
        #exit 0      
else
        echo "Error: LaunchAgent not loaded."      
        #exit 1
fi


# Write LaunchDaemons plist file.
echo '<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>'$DAEMON_ID'</string>
    <key>Program</key>
    <string>'$ROOT_PATH/$AUX_PATH/$HELPER'</string>
    <key>KeepAlive</key>
    <true/>
</dict>
</plist>' > "$LAUNCH_DAEMON_PLIST"

chown -R root:wheel $LAUNCH_DAEMON_PLIST
sleep 1
chmod -R 555 $LAUNCH_DAEMON_PLIST


# Load the new LaunchDaemons.
/bin/launchctl unload "$LAUNCH_DAEMON_PLIST"
/bin/launchctl load "$LAUNCH_DAEMON_PLIST"


# Check LaunchDaemons is loaded.
STATUS=`/bin/launchctl list | /usr/bin/grep -w $DAEMON_ID | /usr/bin/awk '{print $3}'`


if [ "$STATUS" == "$DAEMON_ID" ]; then
        echo "Success: LaunchDaemons loaded."
        #exit 0      
else
        echo "Error: LaunchDaemons not loaded."      
        #exit 1
fi

echo "PostInstall_UI Complete."
